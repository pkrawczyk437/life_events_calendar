{"version":3,"sources":["components/Timer.js","components/Event.js","components/Form.js","Calendar.js","serviceWorker.js","index.js"],"names":["Timer","state","months","weeks","days","hours","minutes","seconds","timeOver","formatEventDate","dateTime","props","then","moment","now","difference","diff","duration","setState","stopTimer","clearInterval","interval","this","setInterval","className","Fragment","from","Component","Event","id","title","description","removeEvent","onClick","Form","handleChange","handleSubmit","errors","isValid","titleError","dateTimeError","descriptionError","onSubmit","type","placeholder","name","onChange","min","max","value","Calendar","eventInfo","events","saveToLocalStorage","localStorage","setItem","JSON","stringify","addEvent","lastEventId","length","event","validateInputs","target","preventDefault","parentElement","filterEvents","filter","parseInt","parse","getItem","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f733aa4b.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport moment from 'moment';\n\nclass Timer extends Component {\n    state = {\n        months: '',\n        weeks: '',\n        days: '',\n        hours: '',\n        minutes: '',\n        seconds: '',\n        timeOver: false\n    }\n\n    componentDidMount() {\n      this.formatEventDate();\n        this.interval = setInterval(this.formatEventDate, 1000);\n    }\n\n    formatEventDate = () => {\n      const { dateTime } = this.props\n      const then = moment(dateTime);\n      const now = moment();\n      const difference = then.diff(now);\n      const duration = moment.duration(difference);\n      const months = duration.months()\n      const days = duration.days();\n      const hours = duration.hours();\n      const minutes = duration.minutes();\n      const seconds = duration.seconds();\n      this.setState(() => ({ months, days, hours, minutes, seconds}), this.stopTimer)\n    }\n\n    stopTimer = () => {\n      const { months, days, hours, minutes, seconds } = this.state\n      let timeOver = false;\n      if(months <= 0 && days <= 0 && hours <= 0 && minutes <= 0 && seconds <= 0){\n        timeOver = true;\n        this.setState(() => ({ timeOver }), () => clearInterval(this.interval))\n      }\n    }\n\n    componentWillUnmount() {\n        if(this.interval) {\n          clearInterval(this.interval)\n        }\n    }\n\n    render() {\n        const { months, days, hours, minutes, seconds, timeOver } = this.state\n        const { dateTime } = this.props;\n         return (\n            <div className=\"timer\">\n              {\n                timeOver ? (\n                <React.Fragment>\n                  <div className={`timer-item ${timeOver ? \"pastEvent\": \"\"}`}>\n                    <span>{moment(dateTime).from(moment())}</span>\n                  </div>\n                </React.Fragment>\n                ) : (\n              <React.Fragment>\n                  <div className=\"timer-item\">\n                    {months} <span>months</span>\n                  </div>\n\n                  <div className=\"timer-item\">\n                    {days} <span>days</span>\n                  </div>\n\n                  <div className=\"timer-item\">\n                    {hours} <span>hours</span>\n                  </div>\n\n                  <div className=\"timer-item\">\n                    {minutes} <span>minutes</span>\n                  </div>\n\n                  <div className=\"timer-item\">\n                    {seconds} <span>seconds</span>\n                  </div>\n                </React.Fragment>\n                )} \n            </div>\n        )\n    }\n}\n\nexport default Timer","import React from 'react'\r\nimport Timer from './Timer';\r\n\r\nconst Event = ({ id, title, description, dateTime, removeEvent}) => {\r\n\r\n  return (\r\n    <div className=\"event\" id={id}>\r\n      <h2 className=\"title\">\r\n        Event name: {title}\r\n        </h2>\r\n      <p>Description: {description}</p>\r\n      <Timer dateTime={dateTime}/>\r\n      <button className=\"deleteBtn\" onClick={removeEvent}>Delete</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Event","import React from 'react'\r\n\r\nconst Form = ({handleChange, handleSubmit, errors, isValid}) => {\r\n  const { titleError, dateTimeError, descriptionError } = errors\r\n\r\n  return (\r\n    <div className=\"form-container\">\r\n      <form className=\"form\" onSubmit={handleSubmit}>\r\n        <div className=\"dataInput\">\r\n          <input type=\"text\" placeholder=\"Name your event...\" name=\"title\" onChange={handleChange}/>\r\n            {titleError !== '' && isValid === false && <div className=\"error\">{titleError}</div>}\r\n        </div>\r\n        <div className=\"dataInput\">\r\n          <input type=\"datetime-local\" placeholder=\"Add date of it...\" min=\"2020-01-01T00:00\" max=\"2040-01-01T00:00\" name=\"dateTime\" onChange={handleChange}/>\r\n            {dateTimeError !== '' && isValid === false && <div className=\"error\">{dateTimeError}</div>}\r\n        </div>\r\n        <div className=\"dataInput\">\r\n          <input type=\"text\" placeholder=\"Add some description...\" name=\"description\" onChange={handleChange}/>\r\n            {descriptionError !== '' && isValid === false && <div className=\"error\">{descriptionError}</div>}\r\n        </div>\r\n        <div className=\"submitInput\">\r\n          <input type=\"submit\" value=\"Add event\"/>\r\n        </div>  \r\n      </form>\r\n    </div>\r\n  )\r\n  \r\n}\r\n\r\nexport default Form\r\n","import React, { Component } from 'react'\r\nimport './styles/Calendar.scss';\r\nimport { Event, Form } from './components';\r\n\r\nclass Calendar extends Component {\r\n  state = {\r\n    eventInfo: {\r\n      id: 0,\r\n      title: '',\r\n      dateTime: '',\r\n      description: ''\r\n    },\r\n    errors: {\r\n      titleError: '',\r\n      dateTimeError: '',\r\n      descriptionError: ''\r\n    },\r\n    isValid: false,\r\n    events: []\r\n  }\r\n\r\n  saveToLocalStorage = () => {\r\n    const { events } = this.state\r\n    localStorage.setItem('events', JSON.stringify(events));\r\n  }\r\n\r\n  addEvent = () => {\r\n    const { isValid, eventInfo, events } = this.state\r\n    const lastEventId = events.length > 0 ? events[events.length - 1].id + 1 : 0;\r\n    const event = {...eventInfo, id: lastEventId}\r\n    if(isValid) {\r\n      this.setState(() => ({ \r\n        eventInfo: event,\r\n        events: [...events, event]\r\n       }), () => {\r\n         this.saveToLocalStorage();\r\n        })\r\n    }\r\n  }\r\n  \r\n  validateInputs = () => {\r\n    const { title, dateTime, description } = this.state.eventInfo\r\n    let errors = { titleError: '', dateTimeError: '', descriptionError: ''};\r\n    let isValid = false;\r\n\r\n    if(!title) {\r\n      errors.titleError = 'Title is required';\r\n    }\r\n\r\n    if(!dateTime) {\r\n      errors.dateTimeError = 'Date and time are required';\r\n    }\r\n\r\n    if(!description) {\r\n      errors.descriptionError = 'Description is required';\r\n    }\r\n\r\n    if(title && dateTime && description) {\r\n      isValid = true;\r\n    }\r\n\r\n    this.setState(() => ({\r\n      errors,\r\n      isValid\r\n    }), () => {\r\n      this.addEvent();\r\n    })\r\n }\r\n\r\n  handleChange = ({ target: { name, value } }) => {\r\n    const { eventInfo } = this.state\r\n      this.setState(() => ({ eventInfo: {...eventInfo, [name]: value} }))\r\n  }\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault()\r\n    this.validateInputs();\r\n  }\r\n\r\n  removeEvent = ({ target: { parentElement: { id } } }) => {\r\n    const { events } = this.state\r\n    const filterEvents = events.filter(event => event.id !== parseInt(id))\r\n\r\n    this.setState(() => ({\r\n      events: filterEvents\r\n    }), () => {\r\n      this.saveToLocalStorage();\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    const events = JSON.parse(localStorage.getItem(\"events\")) || [];\r\n      this.setState(() => ({\r\n        events\r\n      }))\r\n  }\r\n\r\nrender() {\r\n  const { errors, isValid, events } = this.state;\r\n\r\n  return (\r\n    <>\r\n      <Form handleChange={this.handleChange} handleSubmit={this.handleSubmit} errors={errors} isValid={isValid}/>\r\n      {events.length > 0 &&\r\n        <div className=\"events\">\r\n          {events.map( event => (\r\n              <Event {...event} key={event.id} removeEvent={this.removeEvent}/>\r\n          ))}\r\n        </div>\r\n      }\r\n    </>\r\n  )\r\n  \r\n }\r\n}\r\n\r\nexport default Calendar","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Calendar from './Calendar';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Calendar />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}